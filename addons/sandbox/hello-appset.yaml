apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: test-hello-world-appset
  namespace: argocd
spec:
  generators:
    # The list generator generates a set of two application which then filter by the key value to only select the env with value staging
  - git:
      repoURL: https://github.com/pchar/nxt-ops.git
      revision: main
      requeueAfterSeconds: 20
      files:
        - path: apps/*/boot-dir.yaml
      template:
        spec:
          project: "default"
          source:
             repoURL: https://github.com/pchar/nxt-ops.git
             targetRevision: main
             path: apps/{{ .appName }}/templates/
          destination: {}
        metadata: {}

  - git:
      repoURL: https://github.com/pchar/nxt-ops.git
      revision: main
      requeueAfterSeconds: 20
      files:
        - path: apps/*/boot-helm.yaml
      template:
        spec:
          project: "default"
          sources:
             - repoURL: '{{ .helmChartURL }}'
               targetRevision: '{{ .helmChartVersion }}'
               chart: '{{ .helmChartName }}'
               helm:
                  releaseName: '{{ .helmChartName }}'
                  valueFiles:
                    - $values/apps/{{ .helmChartName }}/values.yaml
             - repoURL: https://github.com/pchar/nxt-ops.git
               targetRevision: main
               ref: values
          destination: {}
        metadata: {}

  # Determines whether go templating will be used in the `template` field below.
  goTemplate: true
  # Optional list of go templating options, see https://pkg.go.dev/text/template#Template.Option
  # This is only relevant if `goTemplate` is true
  #goTemplateOptions: ["missingkey=error"]
  goTemplateOptions: ["missingkey=default"]

  # These fields are identical to the Application spec.
  # The generator's template field takes precedence over the spec's template fields
  template:
    metadata:
      name: boot-{{ .userGivenName }}
      annotations:
        argocd.argoproj.io/sync-wave: '{{ default "0" .syncWave }}'
      finalizers:
        - resources-finalizer.argocd.argoproj.io/foreground
      labels:
        app.kubernetes.io/managed-by: argocd-autopilot
        app.kubernetes.io/name: '{{ .appName }}'
       #envLabel: '{{ default "dev" .envLabel }}'
        envLabel: '{{ default "none" .envLabel }}'
    spec:
      project: default
      # defines from which Git repository to extract the desired Application manifests
      destination:
        # Only one of name or server may be specified: if both are specified, an error is returned.
        #  Name of the cluster (within Argo CD) to deploy to
        name: in-cluster # cluster is restricted
        # Target namespace in which to deploy the manifests from source 
        namespace: '{{ .destNamespace }}' # namespace is restricted

  # This sync policy pertains to the ApplicationSet, not to the Applications it creates.
  syncPolicy:
    # Prevents ApplicationSet controller from modifying or deleting Applications
    #applicationsSync: create-only

    # Prevents ApplicationSet controller from deleting Applications. Update is allowed
    applicationsSync: create-update

    # Prevents ApplicationSet controller from modifying Applications. Delete is allowed.
    #applicationsSync: create-delete

    # Prevent an Application's child resources from being deleted, when the parent Application is deleted
    preserveResourcesOnDeletion: true

  strategy:
     # The RollingSync update strategy allows you to group Applications by labels present on the generated Application resources
     # See documentation for "Progressive Syncs"
     type: RollingSync
     rollingSync:
      steps:
        # Application groups are selected using their labels and matchExpressions
        - matchExpressions:
            - key: envLabel
              operator: In
              values:
                - dev
          maxUpdate: 100 # if undefined, all applications matched are updated together (default is 100%)
        - matchExpressions:
            - key: envLabel
              operator: In
              values:
                - env-qa
          maxUpdate: 0      # if 0, no matched applications will be synced unless they're synced manually
        - matchExpressions:
            - key: envLabel
              operator: In
              values:
                - env-prod
          maxUpdate: 10%    # maxUpdate supports both integer and percentage string values (rounds down, but floored at 1 Application for >0%)

  # Define annotations and labels of the Application that this ApplicationSet will ignore
  # ignoreApplicationDifferences is the preferred way to accomplish this now.
  preservedFields:
    annotations: [ some-annotation-key ]
    labels: [ some-label-key ]

  # Define fields of the that should be ignored when comparing Applications
  ignoreApplicationDifferences:
  - jsonPointers:
    - /spec/source/targetRevision
  - name: some-app
    jqPathExpressions:
    - .spec.source.helm.values